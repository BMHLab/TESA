% tesa_interpdata()     - replaces removed data using interpolated data.
%                           Note that either tesa_removedata or
%                           pop_tesa_removedata must be ran first.
% Usage:
%   >>  EEG = tesa_interpdata( EEG, interpolation, interpWin );
%
% Inputs:
%   EEG                 - EEGLAB EEG structure
%   interpolatation     - string describing type of interpolation, either
%                           'linear' or 'cubic'
%   interpWin           - (optional) vector with times before and after
%                           artefact window for fitting cubic function. 
%                           default = [20,20];
%    
% Outputs:
%   EEG                 - EEGLAB EEG structure
%
% See also:
%   SAMPLE, EEGLAB 

% Copyright (C) 2015  Nigel Rogasch, Monash University,
% nigel.rogasch@monash.edu
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

function EEG = tesa_interpdata( EEG, interpolation, interpWin )

if nargin < 2
	error('Not enough input arguments.');
end

if nargin < 3
	interpWin = [20,20];
end

if isempty(interpWin)
    interpWin = [20,20];
end

%Check input for interpolation
if ~(strcmp(interpolation,'linear') || strcmp(interpolation,'cubic'))
	error('Interpolation input must be either linear or cubic');
end

%Check EEG structure for tmscut fields generated by tesa_removedata.m 
if ~isfield(EEG,'tmscut');
    error('Artifact data not removed. Please run pop_tesa_removedata first.');
end

%Check that tmscut fields generated by tesa_removedata.m contain data
if isfield(EEG,'tmscut');
    if isempty(EEG.tmscut(1).tmscut1) || isempty(EEG.tmscut(1).tmscut2);
        error('Artifact removal time points do not contain data. Please re-run pop_tesa_removedata.');
    end
end

%interpolate the missing data
if strcmp(interpolation,'linear') %linear interpolation

    for z = 1:size(EEG.tmscut,2)       
        if strcmp(EEG.tmscut(z).interpolated,'no')
            interpData = [];

            %fit linear function to data
            for a = 1:size(EEG.data,1)
                for b = 1:size(EEG.data,3)

                    %Extract time points before and after removed data
                    x(1,1) = EEG.times(1,EEG.tmscut(z).tmscut1-1);
                    x(1,2) = EEG.times(1,EEG.tmscut(z).tmscut2+1);

                    %Extract data points before and after removed data
                    y(1,1) = EEG.data(a,EEG.tmscut(z).tmscut1-1,b);
                    y(1,2) = EEG.data(a,EEG.tmscut(z).tmscut2+1,b);

                    %Fit linear function to data points
                    p = polyfit(x,y,1);

                    %Interpolate missing data points
                    X = EEG.times(1,EEG.tmscut(z).tmscut1:EEG.tmscut(z).tmscut2); %missing time points
                    interpData(a,:,b) = polyval(p,X);

                end
            end

            %Insert interpolated data 
            EEG.data(:,EEG.tmscut(z).tmscut1:EEG.tmscut(z).tmscut2,:) = interpData;

            %display message
            fprintf('Linear interpolation between %d ms and %d ms \n',EEG.tmscut(z).cutTimesTMS(1,1),EEG.tmscut(z).cutTimesTMS(1,2));

            if ~isempty(EEG.tmscut(z).cutTimesRec)

                interpData = [];

                %fit linear function to data
                for a = 1:size(EEG.data,1)
                    for b = 1:size(EEG.data,3)

                        %Extract time points before and after removed data
                        x(1,1) = EEG.times(1,EEG.tmscut(z).reccut1-1);
                        x(1,2) = EEG.times(1,EEG.tmscut(z).reccut2+1);

                        %Extract data points before and after removed data
                        y(1,1) = EEG.data(a,EEG.tmscut(z).reccut1-1,b);
                        y(1,2) = EEG.data(a,EEG.tmscut(z).reccut2+1,b);

                        %Fit linear function to data points
                        p = polyfit(x,y,1);

                        %Interpolate missing data points
                        X = EEG.times(1,EEG.tmscut(z).reccut1:EEG.tmscut(z).reccut2); %missing time points
                        interpData(a,:,b) = polyval(p,X);

                    end
                end

                %Insert interpolated data 
                EEG.data(:,EEG.tmscut(z).reccut1:EEG.tmscut(z).reccut2,:) = interpData;

                %display message
                fprintf('Linear interpolation between %d ms and %d ms \n',EEG.tmscut(z).cutTimesRec(1,1),EEG.tmscut(z).cutTimesRec(1,2));
            end

            %Indicate that interpolation has happened
            EEG.tmscut(z).interpolated = 'yes';
        end
    end
end
    
if strcmp(interpolation,'cubic') %cubic interpolation
    
    for z = 1:size(EEG.tmscut,2)       
        if strcmp(EEG.tmscut(z).interpolated,'no')
            interpData = [];

            %fit cubic function to data
            for a = 1:size(EEG.data,1)
                for b = 1:size(EEG.data,3)

                    %Extract time points before and after removed data
                    x = EEG.times(1,EEG.tmscut(z).tmscut1-interpWin(1,1):EEG.tmscut(z).tmscut2+interpWin(1,2));
                    dif1 = abs(x-EEG.tmscut(z).cutTimesTMS(1,1));
                    dif2 = abs(x-EEG.tmscut(z).cutTimesTMS(1,2));
                    tp1 = find(dif1 == min(dif1));
                    tp2 = find(dif2 == min(dif2));
                    x(:,tp1:tp2) = [];

                    %Extract data points before and after removed data
                    y = EEG.data(a,EEG.tmscut(z).tmscut1-interpWin(1,1):EEG.tmscut(z).tmscut2+interpWin(1,2),b);
                    y(:,tp1:tp2) = [];

                    %Fit cubic function to data points
                    p = polyfit(x,y,3);

                    %Interpolate missing data points
                    X = EEG.times(1,EEG.tmscut(z).tmscut1:EEG.tmscut(z).tmscut2); %missing time points
                    interpData(a,:,b) = polyval(p,X);

                end
            end

            %Insert interpolated data 
            EEG.data(:,EEG.tmscut(z).tmscut1:EEG.tmscut(z).tmscut2,:) = interpData;

            %display message
            fprintf('Cubic interpolation between %d ms and %d ms \n',EEG.tmscut(z).cutTimesTMS(1,1),EEG.tmscut(z).cutTimesTMS(1,2));
            
            if ~isempty(EEG.tmscut(z).cutTimesRec)
                interpData = [];
                
                %fit cubic function to data
                for a = 1:size(EEG.data,1)
                    for b = 1:size(EEG.data,3)

                        %Extract time points before and after removed data
                        x = EEG.times(1,EEG.tmscut(z).reccut1-interpWin(1,1):EEG.tmscut(z).reccut2+interpWin(1,2));
                        dif1 = abs(x-EEG.tmscut(z).cutTimesRec(1,1));
                        dif2 = abs(x-EEG.tmscut(z).cutTimesRec(1,2));
                        tp1 = find(dif1 == min(dif1));
                        tp2 = find(dif2 == min(dif2));
                        x(:,tp1:tp2) = [];

                        %Extract data points before and after removed data
                        y = EEG.data(a,EEG.tmscut(z).reccut1-interpWin(1,1):EEG.tmscut(z).reccut2+interpWin(1,2),b);
                        y(:,tp1:tp2) = [];

                        %Fit cubic function to data points
                        p = polyfit(x,y,3);

                        %Interpolate missing data points
                        X = EEG.times(1,EEG.tmscut(z).reccut1:EEG.tmscut(z).reccut2); %missing time points
                        interpData(a,:,b) = polyval(p,X);

                    end
                end

                %Insert interpolated data 
                EEG.data(:,EEG.tmscut(z).reccut1:EEG.tmscut(z).reccut2,:) = interpData;

                %display message
                fprintf('Cubic interpolation between %d ms and %d ms \n',EEG.tmscut(z).cutTimesRec(1,1),EEG.tmscut(z).cutTimesRec(1,2));
                
            end                      
        end
        
        %Indicate that interpolation has happened
        EEG.tmscut(z).interpolated = 'yes';
    end
end
    
end
